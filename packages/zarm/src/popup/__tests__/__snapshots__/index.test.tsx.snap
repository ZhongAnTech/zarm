// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popup snapshot renders correctly 1`] = `
<Popup
  afterClose={[MockFunction]}
  destroy={true}
  direction="bottom"
  lockScroll={true}
  mask={true}
  onMaskClick={[MockFunction]}
  visible={false}
>
  <Trigger
    disabled={false}
    onClose={[Function]}
    visible={false}
  >
    <Mask
      color="black"
      destroy={true}
      mountContainer={[Function]}
      onClick={[Function]}
      opacity="normal"
      visible={false}
    >
      <Transition
        destroy={true}
        nodeRef={null}
        tranisitionName="za-fade"
        visible={false}
      >
        <Transition
          addEndListener={[Function]}
          appear={false}
          enter={true}
          exit={true}
          in={false}
          mountOnEnter={true}
          nodeRef={
            Object {
              "current": undefined,
            }
          }
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          unmountOnExit={true}
        />
      </Transition>
    </Mask>
    <Transition
      destroy={true}
      nodeRef={null}
      onEnter={[Function]}
      onLeaveEnd={[Function]}
      tranisitionName="za-move-up"
      visible={false}
    >
      <Transition
        addEndListener={[Function]}
        appear={false}
        enter={true}
        exit={true}
        in={false}
        mountOnEnter={true}
        nodeRef={
          Object {
            "current": undefined,
          }
        }
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        unmountOnExit={true}
      />
    </Transition>
  </Trigger>
</Popup>
`;

exports[`Popup snapshot renders mount node correctly 1`] = `
<Popup
  afterClose={[MockFunction]}
  destroy={true}
  direction="bottom"
  lockScroll={true}
  mask={true}
  mountContainer={[Function]}
  onMaskClick={[MockFunction]}
  visible={true}
>
  <Trigger
    disabled={false}
    onClose={[Function]}
    visible={true}
  >
    <Mask
      color="black"
      destroy={true}
      mountContainer={[Function]}
      onClick={[Function]}
      opacity="normal"
      visible={true}
    >
      <Transition
        destroy={true}
        nodeRef={null}
        tranisitionName="za-fade"
        visible={true}
      >
        <Transition
          addEndListener={[Function]}
          appear={false}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          nodeRef={
            Object {
              "current": <div
                class="za-mask "
                style="background-color: rgba(0, 0, 0, 0.55);"
              />,
            }
          }
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          unmountOnExit={true}
        >
          <Portal
            containerInfo={
              <body
                style="overflow: hidden;"
              >
                <div
                  class="za-mask "
                  style="background-color: rgba(0, 0, 0, 0.55);"
                />
                <div
                  class="za-popup__wrapper"
                >
                  <div
                    class="za-popup za-popup--bottom "
                  >
                    foo
                  </div>
                </div>
              </body>
            }
          >
            <div
              className="za-mask "
              onClick={[Function]}
              style={
                Object {
                  "WebkitAnimationDuration": undefined,
                  "WebkitTransitionDuration": undefined,
                  "animationDuration": undefined,
                  "backgroundColor": "rgba(0, 0, 0, 0.55)",
                  "display": undefined,
                  "transitionDuration": undefined,
                }
              }
            />
          </Portal>
        </Transition>
      </Transition>
    </Mask>
    <Transition
      destroy={true}
      nodeRef={null}
      onEnter={[Function]}
      onLeaveEnd={[Function]}
      tranisitionName="za-move-up"
      visible={true}
    >
      <Transition
        addEndListener={[Function]}
        appear={false}
        enter={true}
        exit={true}
        in={true}
        mountOnEnter={true}
        nodeRef={
          Object {
            "current": <div
              class="za-popup za-popup--bottom "
            >
              foo
            </div>,
          }
        }
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        unmountOnExit={true}
      >
        <Portal
          containerInfo={
            <body
              style="overflow: hidden;"
            >
              <div
                class="za-mask "
                style="background-color: rgba(0, 0, 0, 0.55);"
              />
              <div
                class="za-popup__wrapper"
              >
                <div
                  class="za-popup za-popup--bottom "
                >
                  foo
                </div>
              </div>
            </body>
          }
        >
          <div
            className="za-popup__wrapper"
            style={
              Object {
                "display": undefined,
              }
            }
          >
            <div
              className="za-popup za-popup--bottom "
              style={
                Object {
                  "WebkitAnimationDuration": undefined,
                  "WebkitTransitionDuration": undefined,
                  "animationDuration": undefined,
                  "transitionDuration": undefined,
                  "width": undefined,
                }
              }
            >
              foo
            </div>
          </div>
        </Portal>
      </Transition>
    </Transition>
  </Trigger>
</Popup>
`;
